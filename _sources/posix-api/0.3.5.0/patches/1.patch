diff --git a/posix-api.cabal b/posix-api.cabal
index 2daa9d3..b48bfc8 100644
--- a/posix-api.cabal
+++ b/posix-api.cabal
@@ -73,7 +73,7 @@ extra-source-files:
 
 flag assertions
   manual: True
-  description: Extra run-time invariant checking 
+  description: Extra run-time invariant checking
   default: False
 
 library
@@ -111,6 +111,7 @@ library
     , primitive-offset >= 0.2 && <0.3
     , primitive-unlifted >= 0.1 && <0.2
     , run-st >= 0.1.1 && <0.2
+    , ghc-prim
   hs-source-dirs: src
   if flag(assertions)
     hs-source-dirs: src-assertions
diff --git a/src/Linux/Socket.hs b/src/Linux/Socket.hs
index 1784486..90b28d7 100644
--- a/src/Linux/Socket.hs
+++ b/src/Linux/Socket.hs
@@ -5,6 +5,8 @@
 {-# language UnboxedTuples #-}
 {-# language UnliftedFFITypes #-}
 
+{-# options_ghc -Wno-dodgy-imports #-}
+
 module Linux.Socket
   ( -- * Functions
     uninterruptibleReceiveMultipleMessageA
@@ -55,7 +57,7 @@ import Data.Primitive.Unlifted.Array (MutableUnliftedArray(..),UnliftedArray)
 import Data.Word (Word8)
 import Foreign.C.Error (Errno,getErrno)
 import Foreign.C.Types (CInt(..),CSize(..),CUInt(..))
-import GHC.Exts (Ptr(..),RealWorld,MutableByteArray#,Addr#,MutableArrayArray#,Int(I#))
+import GHC.Exts (Ptr(..),RealWorld,MutableByteArray#,Addr#,MutableArrayArray#(..),Int(I#))
 import GHC.Exts (shrinkMutableByteArray#,touch#,nullAddr#)
 import GHC.IO (IO(..))
 import Linux.Socket.Types (SocketFlags(..))
diff --git a/src/Posix/Socket.hs b/src/Posix/Socket.hs
index 973f763..c77c1da 100644
--- a/src/Posix/Socket.hs
+++ b/src/Posix/Socket.hs
@@ -1,4 +1,5 @@
 {-# language BangPatterns #-}
+{-# language CPP #-}
 {-# language DataKinds #-}
 {-# language DuplicateRecordFields #-}
 {-# language GADTSyntax #-}
@@ -11,6 +12,8 @@
 {-# language UnboxedTuples #-}
 {-# language UnliftedFFITypes #-}
 
+{-# options_ghc -Wno-dodgy-imports #-}
+
 -- | Types and functions related to the POSIX sockets API.
 --   Unusual characteristics:
 --
@@ -215,8 +218,13 @@ import Foreign.C.String (CString)
 import Foreign.C.Types (CInt(..),CSize(..))
 import Foreign.Ptr (nullPtr)
 import GHC.Exts (Ptr,RealWorld,ByteArray#,MutableByteArray#)
-import GHC.Exts (Addr#,TYPE,RuntimeRep(UnliftedRep))
-import GHC.Exts (ArrayArray#,MutableArrayArray#,Int(I#))
+import GHC.Exts (Addr#,TYPE)
+#if MIN_VERSION_ghc_prim(0,8,0)
+import GHC.Types (UnliftedRep)
+#else
+import GHC.Exts (RuntimeRep(UnliftedRep))
+#endif
+import GHC.Exts (ArrayArray#(..),MutableArrayArray#(..),Int(I#))
 import GHC.Exts (shrinkMutableByteArray#,touch#)
 import Posix.Socket.Types (Family(..),Protocol(..),Type(..),SocketAddress(..))
 import Posix.Socket.Types (SocketAddressInternet(..))
@@ -770,7 +778,7 @@ writeVector fd buffers = do
   touchLifted newBufs
   pure r
 
-data UList (a :: TYPE 'UnliftedRep) where
+data UList (a :: TYPE UnliftedRep) where
   UNil :: UList a
   UCons :: a -> UList a -> UList a
 
@@ -824,7 +832,7 @@ uninterruptibleSendMessageB ::
   -> CSize -- ^ Length in bytes (payload A)
   -> MessageFlags 'Send -- ^ Flags
   -> IO (Either Errno CSize) -- ^ Number of bytes pushed to send buffer
-uninterruptibleSendMessageB fd 
+uninterruptibleSendMessageB fd
   (MutableByteArrayOffset{array,offset}) lenB
   (Addr addr) lenA flags =
     c_unsafe_sendmsg_b fd (unMba array) offset lenB addr lenA flags
