diff --git a/src/Database/CQL/Protocol/Record.hs b/src/Database/CQL/Protocol/Record.hs
index 266501a..1ea7db3 100644
--- a/src/Database/CQL/Protocol/Record.hs
+++ b/src/Database/CQL/Protocol/Record.hs
@@ -91,8 +91,16 @@ asTupleDecl c =
   where
     go n t = do
         vars <- replicateM (length t) (newName "a")
-        return $ Clause [ConP n (map VarP vars)] (body vars) []
-    body = NormalB . mkTup . map VarE
+        return $ Clause [ConP n
+#if MIN_VERSION_template_haskell(2,18,0)
+                              []
+#endif
+                              (map VarP vars)] (body vars) []
+    body = NormalB . TupE
+#if MIN_VERSION_template_haskell(2,16,0)
+                          . map Just
+#endif
+                          . map VarE
 
 asRecrdDecl ::Con -> Q Clause
 asRecrdDecl c =
diff --git a/src/Database/CQL/Protocol/Tuple/TH.hs b/src/Database/CQL/Protocol/Tuple/TH.hs
index 26a179f..ab43ff2 100644
--- a/src/Database/CQL/Protocol/Tuple/TH.hs
+++ b/src/Database/CQL/Protocol/Tuple/TH.hs
@@ -72,7 +72,11 @@ storeDecl n = do
     names <- replicateM n (newName "k")
     return $ Clause [VarP v, TupP (map VarP names)] (NormalB $ body v names) []
   where
-    body x names = DoE (NoBindS size : map (NoBindS . value x) names)
+    body x names = DoE
+#if MIN_VERSION_template_haskell(2,17,0)
+                       Nothing
+#endif
+                       (NoBindS size : map (NoBindS . value x) names)
     size         = var "put" $$ SigE (litInt n) (tcon "Word16")
     value x v    = var "putValue" $$ VarE x $$ (var "toCql" $$ VarE v)
 
@@ -117,7 +121,11 @@ cqlInstances n = do
         Clause
             [VarP (mkName "t")]
             (NormalB $ CaseE (var "t")
-                [ Match (ParensP (ConP (mkName "CqlTuple") [ListP (map VarP names)]))
+                [ Match (ParensP (ConP (mkName "CqlTuple")
+#if MIN_VERSION_template_haskell(2,18,0)
+                                       []
+#endif
+                                       [ListP (map VarP names)]))
                         (NormalB $ body names)
                         []
                 , Match WildP
